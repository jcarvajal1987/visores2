---
const { src } = Astro.props;
---

<template>
    <style>
        button {
            padding: 0;
            border: 0;
            background: transparent;
            cursor: pointer;
            outline: none;
        }
        #audio-player-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: auto;
            padding: 15px 10px;
            width: 100%;
            border-radius: 4px;
            background: #191919;
            --seek-before-width: 0%;
            --volume-before-width: 100%;
            --buffered-width: 0%;
        }

        p {
            position: absolute;
            top: -18px;
            right: 5%;
            padding: 0 5px;
            margin: 0;
            font-size: 28px;
            background: #fff;
        }
        #play-icon {
            height: 34px;
            place-self: center;
            grid-column-start: 2;
            grid-column-end: 3;
        }
        /* path {
            stroke: #EB6708;
        } */
        .time {
            color: #a9a9a9;
            grid-column-start: 1;
            grid-column-end: 2;
            font-size: 16px;
        }
        .time2 {
            color: #a9a9a9;
            grid-column-start: 3;
            grid-column-end: 4;
            font-size: 16px;
            justify-self: right;
        }
        .sonido {
            color: #a9a9a9;
            grid-column-start: 3;
            grid-column-end: 4;
            display: flex;
            justify-self: right;
            align-items: center;
        }
        output {
            font-size: 10px;
        }
        #volume-output {
            color: #a9a9a9;
            padding-bottom: 2px;
            padding-right:5px
        }
        #volume-slider {
            margin: 0px 2.5%;
            width: 58%;
            
        }
        #volume-slider::-webkit-slider-runnable-track {
            background: #3e3d3c;
            height:5px;
        }
        #volume-slider::-moz-range-track {
            background: #3e3d3c;
            height:5px;
        }
        #volume-slider::-ms-fill-upper {
            background: #3e3d3c;
            height:5px;
        }
        #volume-slider::before {
            width: var(--volume-before-width);
            height: 5px;
            overflow:hidden;
        }
        #mute-icon {
            margin: 0 2.5%;
            display: flex;
            align-items: center;
            width:24px;
        }
        .grid-item {
            grid-column-start: 1;
            grid-column-end: 4;
        }
        .grid-volumen {
        }
        input[type="range"] {
            position: relative;
            -webkit-appearance: none;
            width: 100%;
            margin: 0;
            padding: 0;
            outline: none;
            padding: 10px 0;
            background: #191919;
        }
        input #volume-slider::-webkit-slider-runnable-track {

            background: red;
        }
        input[type="range"]::-webkit-slider-runnable-track {
            width: 100%;
            height: 10px;
            cursor: pointer;
            background: linear-gradient(
                to right,
                #a6a6a6 var(--buffered-width),
                #3e3d3c var(--buffered-width)
            );
        }
        input[type="range"]::before {
            position: absolute;
            content: "";
            left: 0;
            width: var(--seek-before-width);
            height: 10px;
            background-color: #eb6708;
            cursor: pointer;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            position: relative;
            -webkit-appearance: none;
            box-sizing: content-box;
            box-shadow:
                0 0 0 2px white;
            height: 14px;
            width: 14px;
            border-radius: 50%;
            background-color: #fff;
            cursor: pointer;
            margin: -2.5px 0 0 0;
        }
        .sonido input[type="range"]::-webkit-slider-thumb {
            background-color: transparent;
            box-shadow: none;
        }
        .sonido input[type="range"]:active::-webkit-slider-thumb {
            background-color: transparent;
            box-shadow: none;
        }
        input[type="range"]:active::-webkit-slider-thumb {
            transform: scale(1.2);
        }
        input[type="range"]::-moz-range-track {
            width: 100%;
            height: 3px;
            cursor: pointer;
            background: linear-gradient(
                to right,
                #a6a6a6 var(--buffered-width),
                #3e3d3c var(--buffered-width)
            );
        }
        input[type="range"]::-moz-range-progress {
            background-color: #eb6708;
        }
        input[type="range"]::-moz-focus-outer {
            border: 0;
        }
        input[type="range"]::-moz-range-thumb {
            box-sizing: content-box;
            border: 1px solid #eb6708;
            height: 15px;
            width: 15px;
            border-radius: 50%;
            background-color: #fff;
            cursor: pointer;
        }
        input[type="range"]:active::-moz-range-thumb {
            transform: scale(1.2);
        }
        input[type="range"]::-ms-track {
            width: 100%;
            height: 3px;
            cursor: pointer;
            background: transparent;
            border: solid transparent;
            color: transparent;
        }
        input[type="range"]::-ms-fill-lower {
            background-color: red;
        }
        input[type="range"]::-ms-fill-upper {
            border-radius: 10px;
            overflow: hidden;
            background: linear-gradient(
                to right,
                #a6a6a6 var(--buffered-width),
                #3e3d3c var(--buffered-width)
            );
        }
        input[type="range"]::-ms-thumb {
            box-sizing: content-box;
            border: 1px solid #eb6708;
            height: 15px;
            width: 15px;
            border-radius: 50%;
            background-color: #fff;
            cursor: pointer;
        }
        input[type="range"]:active::-ms-thumb {
            transform: scale(1.2);
        }
        .audio-player {
            width: 100%;
            display: flex;
        }
        @media (min-width: 1px) and (max-width: 960px) {
            #volume-output {
                display: none;
            }
            #volume-slider {
                display: none;
            }
        }
    </style>
    <div id="audio-player-container">
        <audio src="" preload="metadata" loop></audio>
        <span id="current-time" class="time">0:00</span>
        <span id="duration" class="time2">0:00</span>
        <span class="grid-item">
            <input type="range" id="seek-slider" max="100" value="0" />
        </span>
        <button id="play-icon"></button>
        <div class="sonido">
            <output id="volume-output">100</output>
            <input type="range" id="volume-slider" max="100" value="100" />
            <button id="mute-icon"></button>
        </div>
    </div>
</template>

<audio-player data-src={src} style="display:flex"></audio-player>

<script>
    class AudioPlayer extends HTMLElement {
        constructor() {
            super();
            const template = document.querySelector("template");
            const templateContent = template.content;
            const shadow = this.attachShadow({ mode: "open" });
            shadow.appendChild(templateContent.cloneNode(true));
        }

        connectedCallback() {
            everything(this);
        }
    }

    const playIcon = `<img src="./img/play.svg" alt="" />`,
        pauseIcon = `<img src="./img/pause.svg" alt="" />`,
        soundIcon = `<img src="./img/sound.svg" alt="" />`,
        muteIcon = `<img src="./img/mute.svg" alt="" />`;

    const everything = function (element) {
        const shadow = element.shadowRoot;

        const audioPlayerContainer = shadow.getElementById(
            "audio-player-container",
        );
        const playIconContainer = shadow.getElementById("play-icon");
        const seekSlider = shadow.getElementById("seek-slider");
        const volumeSlider = shadow.getElementById("volume-slider");
        const muteIconContainer = shadow.getElementById("mute-icon");
        const audio = shadow.querySelector("audio");
        const durationContainer = shadow.getElementById("duration");
        const currentTimeContainer = shadow.getElementById("current-time");
        const outputContainer = shadow.getElementById("volume-output");
        let playState = "play";
        let muteState = "unmute";
        let raf = null;

        audio.src = element.getAttribute("data-src");

        playIconContainer.innerHTML = playIcon;
        muteIconContainer.innerHTML = soundIcon;

        const whilePlaying = () => {
            seekSlider.value = Math.floor(audio.currentTime);
            currentTimeContainer.textContent = calculateTime(seekSlider.value);
            audioPlayerContainer.style.setProperty(
                "--seek-before-width",
                `${(seekSlider.value / seekSlider.max) * 100}%`,
            );
            raf = requestAnimationFrame(whilePlaying);
        };

        const showRangeProgress = (rangeInput) => {
            if (rangeInput === seekSlider)
                audioPlayerContainer.style.setProperty(
                    "--seek-before-width",
                    (rangeInput.value / rangeInput.max) * 100 + "%",
                );
            else
                audioPlayerContainer.style.setProperty(
                    "--volume-before-width",
                    (rangeInput.value / rangeInput.max) * 100 + "%",
                );
        };

        const calculateTime = (secs) => {
            const minutes = Math.floor(secs / 60);
            const seconds = Math.floor(secs % 60);
            const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
            return `${minutes}:${returnedSeconds}`;
        };

        const displayDuration = () => {
            durationContainer.textContent = calculateTime(audio.duration);
        };

        const setSliderMax = () => {
            seekSlider.max = Math.floor(audio.duration);
        };

        const displayBufferedAmount = () => {
            const bufferedAmount = Math.floor(
                audio.buffered.end(audio.buffered.length - 1),
            );
            audioPlayerContainer.style.setProperty(
                "--buffered-width",
                `${(bufferedAmount / seekSlider.max) * 100}%`,
            );
        };

        if (audio.readyState > 0) {
            displayDuration();
            setSliderMax();
            displayBufferedAmount();
        } else {
            audio.addEventListener("loadedmetadata", () => {
                displayDuration();
                setSliderMax();
                displayBufferedAmount();
            });
        }

        playIconContainer.addEventListener("click", () => {
            if (playState === "play") {
                audio.play();
                requestAnimationFrame(whilePlaying);
                playIconContainer.innerHTML = pauseIcon;
                playState = "pause";
            } else {
                audio.pause();
                playIconContainer.innerHTML = playIcon;
                cancelAnimationFrame(raf);
                playState = "play";
            }
        });

        muteIconContainer.addEventListener("click", () => {
            if (muteState === "unmute") {
                muteIconContainer.innerHTML = muteIcon;
                audio.muted = true;
                muteState = "mute";
            } else {
                muteIconContainer.innerHTML = soundIcon;
                audio.muted = false;
                muteState = "unmute";
            }
        });

        audio.addEventListener("progress", displayBufferedAmount);

        seekSlider.addEventListener("input", (e) => {
            showRangeProgress(e.target);
            currentTimeContainer.textContent = calculateTime(seekSlider.value);
            if (!audio.paused) {
                cancelAnimationFrame(raf);
            }
        });

        seekSlider.addEventListener("change", () => {
            audio.currentTime = seekSlider.value;
            if (!audio.paused) {
                requestAnimationFrame(whilePlaying);
            }
        });

        volumeSlider.addEventListener("input", (e) => {
            const value = e.target.value;
            showRangeProgress(e.target);
            outputContainer.textContent = value;
            audio.volume = value / 100;
        });

        if ("mediaSession" in navigator) {
            // navigator.mediaSession.metadata = new MediaMetadata({
            //     title: 'Komorebi',
            //     artist: 'Anitek',
            //     album: 'MainStay',
            //     artwork: [
            //         { src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '96x96', type: 'image/png' },

            //     ]
            // });
            navigator.mediaSession.setActionHandler("play", () => {
                if (playState === "play") {
                    audio.play();
                    requestAnimationFrame(whilePlaying);
                    playState = "pause";
                } else {
                    audio.pause();
                    cancelAnimationFrame(raf);
                    playState = "play";
                }
            });
            navigator.mediaSession.setActionHandler("pause", () => {
                if (playState === "play") {
                    audio.play();
                    requestAnimationFrame(whilePlaying);
                    playState = "pause";
                } else {
                    audio.pause();
                    cancelAnimationFrame(raf);
                    playState = "play";
                }
            });
            navigator.mediaSession.setActionHandler(
                "seekbackward",
                (details) => {
                    audio.currentTime =
                        audio.currentTime - (details.seekOffset || 10);
                },
            );
            navigator.mediaSession.setActionHandler(
                "seekforward",
                (details) => {
                    audio.currentTime =
                        audio.currentTime + (details.seekOffset || 10);
                },
            );
            navigator.mediaSession.setActionHandler("seekto", (details) => {
                if (details.fastSeek && "fastSeek" in audio) {
                    audio.fastSeek(details.seekTime);
                    return;
                }
                audio.currentTime = details.seekTime;
            });
            navigator.mediaSession.setActionHandler("stop", () => {
                audio.currentTime = 0;
                seekSlider.value = 0;
                audioPlayerContainer.style.setProperty(
                    "--seek-before-width",
                    "0%",
                );
                currentTimeContainer.textContent = "0:00";
                if (playState === "pause") {
                    cancelAnimationFrame(raf);
                    playState = "play";
                }
            });
        }
    };

    customElements.define("audio-player", AudioPlayer);
</script>
